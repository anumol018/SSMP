#include<stdio.h>
void FCFS();
void SJF();
void priority();
void roundrobin();

int n,i,j,temp1,temp2,temp3,tot_wt=0,tot_tat=0;
float avg_wt,avg_tat;
 
void main(){
 int choice;
 while(choice<5){
  printf("Enter the operation:\n1.FCFS Scheduling\t2.SJF Scheduling\n3.Priority Scheduling\t4.Round Robin Scheduling\t5.Exit\nChoice:");
  scanf("%d",&choice);
  switch(choice){
   case 1:
       FCFS();
       break;
   case 2:
       SJF();
       break;
   case 3:
       priority();
       break;
   case 4:
       roundrobin();
       break;
   default:
       printf("EXITED!!");
       break;
  }
  printf("\n");
 }
}

void FCFS(){
printf("-------------------FCFS Scheduling------------------\n");
 printf("Enter the no. of processes:");
 scanf("%d",&n);
 int p[n],bt[n],wt[n],tat[n];
 for(i=0;i<n;i++){
  printf("Enter the burst time of P[%d]:",i);
  scanf("%d",&bt[i]);
  p[i]=i;
 }
 
 wt[0]=0;
 tat[0]=bt[0];
 for(i=1;i<n;i++){
  wt[i]=wt[i-1]+bt[i-1];
  tat[i]=tat[i-1]+bt[i];
 }
 printf("\n");
 
 printf("\nPROCESS |  BURST TIME   | WAITING TIME |TURN AROUND TIME   |\n");
 for(i=0;i<n;i++){
  printf("P[%d]\t|   %d   \t|    %d\t       |        %d         |\n",p[i],bt[i],wt[i],tat[i]);
  tot_wt=tot_wt+wt[i];
  tot_tat=tot_tat+tat[i];
 } 
 
 printf("\n");
 printf("GANTT CHART:\n");
 for(i=0;i<n;i++){
  printf("| P[%d] | ",p[i]);
 }
 printf("\n");
 for(i=0;i<n;i++){
  printf("%d\t ",wt[i]);
 }
 printf("%d",tat[n-1]);
 printf("\n");
 
 avg_wt=(float)tot_wt/n;
 avg_tat=(float)tot_tat/n;
 printf("\nTotal wating time=%d\tAverage waiting time=%f\nTotal turn around time=%d\tAverage turn around time=%f\n",tot_wt,avg_wt,tot_tat,avg_tat);
 printf("----------------------------------------------------\n");
}

void SJF(){
 printf("------------------SJF Scheduling--------------------\n");
 printf("Enter the no. of processes:");
 scanf("%d",&n);
 int p[n],bt[n],wt[n],tat[n];
 for(i=0;i<n;i++){
  printf("Enter the burst time of P[%d]:",i);
  scanf("%d",&bt[i]);
  p[i]=i;
 } 
 
 for(i=0;i<n;i++){
  for(j=i+1;j<n;j++){
   if(bt[i]>bt[j]){
    temp1=bt[i];
    bt[i]=bt[j];
    bt[j]=temp1;
    
    temp2=p[i];
    p[i]=p[j];
    p[j]=temp2;
   }
  }
 }

 wt[0]=0;
 tat[0]=bt[0];
 for(i=1;i<n;i++){
  wt[i]=wt[i-1]+bt[i-1];
  tat[i]=tat[i-1]+bt[i];
 }
 printf("\n");
 
 printf("\nPROCESS |  BURST TIME   | WAITING TIME | TURN AROUND TIME   |\n");
 for(i=0;i<n;i++){
  printf("P[%d]\t|   %d   \t|    %d\t       |         %d          |\n",p[i],bt[i],wt[i],tat[i]);
  tot_wt=tot_wt+wt[i];
  tot_tat=tot_tat+tat[i];
 }
 
 printf("\n");
 printf("GANTT CHART:\n");
 for(i=0;i<n;i++){
  printf("| P[%d] | ",p[i]);
 }
 printf("\n");
 for(i=0;i<n;i++){
  printf("%d\t ",wt[i]);
 }
 printf("%d",tat[n-1]);
 printf("\n");
 
 avg_wt=(float)tot_wt/n;
 avg_tat=(float)tot_tat/n;
 printf("\nTotal wating time=%d\tAverage waiting time=%f\nTotal turn around time=%d\tAverage turn around time=%f\n",tot_wt,avg_wt,tot_tat,avg_tat);
 printf("----------------------------------------------------\n");
}

void priority(){
 printf("----------------Priority Scheduling-----------------\n");
 printf("Enter the no. of processes:");
 scanf("%d",&n);
 int p[n],bt[n],wt[n],tat[n],prio[n];
 for(i=0;i<n;i++){
  printf("Enter the burst time and priority of P[%d]:",i);
  scanf("%d%d",&bt[i],&prio[i]);
  p[i]=i;
 } 
 
 for(i=0;i<n;i++){
  for(j=i+1;j<n;j++){
   if(prio[i]>prio[j]){
    temp1=prio[i];
    prio[i]=prio[j];
    prio[j]=temp1;
    
    temp2=bt[i];
    bt[i]=bt[j];
    bt[j]=temp2;
    
    temp3=p[i];
    p[i]=p[j];
    p[j]=temp3;
   }
  }
 }

 wt[0]=0;
 tat[0]=bt[0];
 for(i=1;i<n;i++){
  wt[i]=wt[i-1]+bt[i-1];
  tat[i]=tat[i-1]+bt[i];
 }
 printf("\n");
 
printf("PROCESS | BURST TIME| PRIORITY| WAITING TIME |TURN AROUND TIME|\n");
 for(i=0;i<n;i++){
   printf("P[%d]\t|   %d \t    |   %d     |    %d\t     |        %d       |\n",p[i],bt[i],prio[i],wt[i],tat[i]);
  tot_wt=tot_wt+wt[i];
  tot_tat=tot_tat+tat[i];
 }
 
 printf("\n");
 printf("GANTT CHART:\n");
 for(i=0;i<n;i++){
  printf("| P[%d] | ",p[i]);
 }
 printf("\n");
 for(i=0;i<n;i++){
  printf("%d\t ",wt[i]);
 }
 printf("%d",tat[n-1]);
 printf("\n");
 
 avg_wt=(float)tot_wt/n;
 avg_tat=(float)tot_tat/n;
 printf("\nTotal wating time=%d\tAverage waiting time=%f\nTotal turn around time=%d\tAverage turn around time=%f\n",tot_wt,avg_wt,tot_tat,avg_tat);
 printf("---------------------------------------------------\n");
}

void roundrobin(){ 
 printf("--------------Round Robin Scheduling---------------\n");
 int tq,total,completed=0,a=0;
 printf("Enter the no. of processes:");
 scanf("%d",&n);
 int p[n],bt[n],wt[n],tat[n],rm_time[n],q[50];
 for(i=0;i<n;i++){
  printf("Enter the burst time of P[%d]:",i);
  scanf("%d",&bt[i]);
  p[i]=i;
  rm_time[i]=bt[i];
 }
 q[a]=0;
 printf("Enter Time Quatum:");
 scanf("%d",&tq);
 printf("\nGANTT CHART \n");
 while(completed<n){
  for(i=0;i<n;i++){
   if(rm_time[i]>0){
    if(rm_time[i]>tq){
     rm_time[i]=rm_time[i]-tq;
     total=total+tq;
     q[++a]=total;
     printf("|P[%d]| ",p[i]);
    }
    else{
     total=total+rm_time[i];
     q[++a]=total;
     rm_time[i]=0;
     tat[i]=total;
     wt[i]=total-bt[i];
     printf("|P[%d]| ",p[i]);
     completed++;
    }
   }
  }
 }
 printf("\n");
 for(i=0;i<=a;i++){
  printf("%d    ",q[i]);
 }
 
 printf("\n");
 printf("\nPROCESS |  BURST TIME   | WAITING TIME |TURN AROUND TIME    |\n");
 for(i=0;i<n;i++){
  printf("P[%d]\t|   %d   \t|    %d\t       |        %d          |\n",p[i],bt[i],wt[i],tat[i]);
  tot_wt=tot_wt+wt[i];
  tot_tat=tot_tat+tat[i];
 } 

 avg_wt=(float)tot_wt/n;
 avg_tat=(float)tot_tat/n;
 printf("\nTotal wating time=%d\tAverage waiting time=%f\nTotal turn around time=%d\tAverage turn around time=%f\n",tot_wt,avg_wt,tot_tat,avg_tat);
 printf("---------------------------------------------------\n");   
}
